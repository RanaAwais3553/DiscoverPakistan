"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_native_1 = require("react-native");
const react_native_reanimated_1 = __importStar(require("react-native-reanimated"));
const Constants_1 = require("./Constants");
function SkeletonLoader(props) {
    const { children, duration = Constants_1.DEFAULT_DURATION, boneColor = Constants_1.DEFAULT_BONE_COLOR, highlightColor = Constants_1.DEFAULT_HIGHLIGHT_COLOR, style, } = props;
    const progress = react_native_reanimated_1.useSharedValue(0);
    React.useEffect(() => {
        progress.value = react_native_reanimated_1.withRepeat(react_native_reanimated_1.withTiming(1, { duration }), -1, true);
    }, []);
    const getChildren = React.useCallback((element) => {
        return React.Children.map(element, (child, index) => {
            if (child.type.displayName !== "SkeletonItem" &&
                child.type.displayName !== "SkeletonContainer") {
                return child;
            }
            if (child.props.children) {
                return (<react_native_1.View key={index} style={child.props.style}>
                {getChildren(child.props.children)}
              </react_native_1.View>);
            }
            const style = Object.assign({ backgroundColor: highlightColor }, child.props.style);
            return (<PulseView progress={progress} style={style} boneColor={boneColor} highlightColor={highlightColor}/>);
        });
    }, []);
    return <react_native_1.View style={[styles.container, style]}>{getChildren(children)}</react_native_1.View>;
}
exports.default = SkeletonLoader;
SkeletonLoader.Item = (_a) => {
    var { style } = _a, props = __rest(_a, ["style"]);
    return (<react_native_1.View style={style} {...props}/>);
};
SkeletonLoader.Container = (_a) => {
    var { children, style } = _a, props = __rest(_a, ["children", "style"]);
    return (<react_native_1.View style={style} {...props}>
    {children}
  </react_native_1.View>);
};
//@ts-ignore
SkeletonLoader.Item.displayName = "SkeletonItem";
//@ts-ignore
SkeletonLoader.Container.displayName = "SkeletonContainer";
const PulseView = (props) => {
    const progress = react_native_reanimated_1.useDerivedValue(() => props.progress.value);
    const animatedStyle = react_native_reanimated_1.useAnimatedStyle(() => {
        return {
            backgroundColor: react_native_reanimated_1.interpolateColor(progress.value, [0, 1], [props.boneColor, props.highlightColor]),
        };
    }, []);
    return (<react_native_reanimated_1.default.View style={[styles.skeleton, props.style, animatedStyle]}/>);
};
const styles = react_native_1.StyleSheet.create({
    container: {
        overflow: "hidden",
    },
    skeleton: {
        height: "100%",
        width: "100%",
    },
});
//# sourceMappingURL=Loader.js.map